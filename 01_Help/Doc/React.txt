# React:

# Introducion:

--> Front-end Js Library 
--> 2013 Open-source Library that have pre-bulit functionality
--> Componet base architecture / Direct Approach / Declarative Approach
--> Componet / Moduler code (Reusable piece of code / Function / Custom Html creater)
--> It creates virtual DOM in memory 

# History:

--> Facebook >> 2011 >> Jordan Walke

# Need:

--> Used To create complex user interfaces 
--> Used To build single-page application 
--> Used To create reusable UI components

# Documentation: 

--> https://react.dev/
--> https://reactrouter.com/
--> https://vite.dev/

# JS 

--> Imperative Approach
--> step by stap

# React

--> Easy Reuasability / Readability / maintainance
--> It loads one single HTML pages and make change dynamically to create other eleemnt

# JSX:

--> JS XML
--> HTML code inside JS

Alternate:

--> Angular / Vue / React / Next JS / Remix 

# Installation: 

/////////////////////// M 1 ////////////////////////

# Extension:

--> es7 Redux React Code

# Node SetUp:

1) install node (https://nodejs.org/en)
   
2) verification
   cmd : node -v / --version
   cmd : npm -v / --version

# React SetUp:

--> M1
  1) npm uninstall -g create-react-app.
  2) npx create-react-app (name_of_ract_app)
  3) cd (name_of_ract_app)
  4) npm run start / npm start
  5) Ctrl + C (exit)

--> Directory Structure
  1) node _modules : It contain required dependency 
  2) Public : It contain all static files
  3) src : main content
  5) package.json : It conatin dependancy and script
  6) src > index.js : First file to start (Entry point) create root 
  7) src > index.css : Css configuation for index.js
  8) public > index.html: root (convert to react root)
  9) src > App.js : render on index.js
  10) src > App.css : Css configuation for App.js

--> M2
  1) npm create vite@latest (name_of_ract_app)
  2) cd (name_of_ract_app)
  3) npm install / npm i 
  4) npm run dev
  5) Ctrl + C (exit)

--> Directory Structure
  1) node _modules : It contain required dependency and packages
  2) Public : It contain all static files
  3) src : main content
  4) src >> assets : It contain all required things that is used in building
  5) parent_folder > index.html: root (convert to react root)
  6) src > main.jsx : First file to start (Entry point) create root 
  7) src > index.css : Css configuation for main.jsx
  8) src > App.jsx : render on index.html
  9) src > App.css : Css configuation for App.jsx
  10) package.json : It conatin dependancy and script
  11) JSX (HTML code inside JS) >> react >> html
  12) Export and import

/////////////////////// M 2 ////////////////////////

--> https://github.com/thepranaygupta/html-tailwind-css-starter-pack

--> git clone https://github.com/thepranaygupta/html-tailwind-css-starter-pack.git

# Syntex:

--> Enter : rfce

import React from 'react';
import ReactDOM from 'react-dom/client';

function Hello(props) {
  return <h1>Hello World!</h1>;
}

const container = document.getElementById("root");
const root = ReactDOM.createRoot(container);
root.render(<Hello />);

# React Fiber 

https://github.com/acdlite/react-fiber-architecture
https://www.geeksforgeeks.org/reactjs/what-is-react-fiber/


# React components

--> Function that returns HTML elements 
--> Independent and reusable codes 
--> Class components and Function components
--> Components name always starts with capital letter 

# Components Implementation 

--> Component in Component 
--> Component in Files

# Life Cycle of Components 

 1) Mounting 
--> Rendering element into DOM

 2) Updating 
--> Update DOM structure based in user action 

 3) Unmounting 
--> Removal of component from DOM 

# Props: (Properties)

--> Props are arguments passed into React components 
--> Data passing from Parent to Child 

# Props drilling

--> Data parent se child tak line meai send hota heai 
--> P --> c1 --> c2 --> c3 

# State Lifting

--> child se parent ki data pass karna
--> It also help to pass data to siblings

// maintain single state at parent the pass function and value to Props

# React Event 

--> Based on user action perform various taskl

# Condtional rendering

1) if-else
2) ternary Operator
3) logical Operator
4) Early return 

To be continue FORMS 

# Hooks:

--> Addtional functionallity
--> Must be used in functional component

1) usestate
--> It allows us to track state in a function component 

2) useEffect
--> React hook used to generate side effect
--> On happening certain event we are going to handle

 # Syntex 
--> useEffect(() => {
    first
  
    return () => {
      second
    }
  }, [third])
--> First : Side-effect function
--> second : cleanup function
--> third : comman seprated dependancy list

 # Uses 
--> Componet
--> Time Componet
--> Data fetching
--> Resize component
--> Multieffect

3) useContext
 
 # Need:
 Problem
--> P --> c1 --> c2 --> c3 
 Solution
--> P --> c3

 # Step:
--> Create context
--> Provide  (we can use multiple provider)
--> Consume

4) useRef
--> It return object contain (.current)

 # Usecase
--> variable that persist value across re-render
--> access DOM eleemnt directly 
-> ref create 
-> ref link to eleemnt
-> ref.current 

5) useMemo
--> Store data for after uses when it is needed


6) useNavigation
--> 

7) usecallback
--> It catches function defination so that function will never created again and again
--> Used to avoid re-render of child component
--> Used to handle expensive operation

React Routing:

--> CMD : npm i -D react-router-dom

useLoaderData
loader 
useparam 
outlet 
nav / navlink



How to pass route parameter in Routing:

Nested routing:


Redux:

--> State management (Redux / Redux Toolkit / zustand / context API )



https://www.udemy.com/course/the-ultimate-react-course/?couponCode=LEARNNOWPLANS




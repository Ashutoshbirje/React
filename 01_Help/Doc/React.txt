# React:

# Introducion:

--> Front-end Js Library 
--> 2013 Open-source Library that have pre-bulit functionality
--> Componet base architecture / Direct Approach / Declarative Approach
--> Componet / Moduler code (Reusable piece of code / Function / Custom Html creater)
--> It creates virtual DOM in memory 

# History:

--> Facebook >> 2011 >> Jordan Walke

# Need:

--> Used To create complex user interfaces 
--> Used To build single-page application 
--> Used To create reusable UI components

# Documentation: 

--> https://react.dev/
--> https://reactrouter.com/
--> https://vite.dev/

# JS 

--> Imperative Approach
--> step by stap

# React

--> Easy Reuasability / Readability / maintainance
--> It loads one single HTML pages and make change dynamically to create other eleemnt

# JSX:

--> JS XML
--> HTML code inside JS

Alternate:

--> Angular / Vue / React / Next JS / Remix 

# Installation: 

/////////////////////// M 1 ////////////////////////

# Extension:

--> es7 Redux React Code

# Node SetUp:

1) install node (https://nodejs.org/en)
   
2) verification
   cmd : node -v / --version
   cmd : npm -v / --version

# React SetUp:

--> M1
  1) npm uninstall -g create-react-app.
  2) npx create-react-app (name_of_ract_app)
  3) cd (name_of_ract_app)
  4) npm run start / npm start
  5) Ctrl + C (exit)

--> Directory Structure
  1) node _modules : It contain required dependency 
  2) Public : It contain all static files
  3) src : main content
  5) package.json : It conatin dependancy and script
  6) src > index.js : First file to start (Entry point) create root 
  7) src > index.css : Css configuation for index.js
  8) public > index.html: root (convert to react root)
  9) src > App.js : render on index.js
  10) src > App.css : Css configuation for App.js

--> M2
  1) npm create vite@latest (name_of_ract_app)
  2) cd (name_of_ract_app)
  3) npm install / npm i 
  4) npm run dev
  5) Ctrl + C (exit)

--> Directory Structure
  1) node _modules : It contain required dependency and packages
  2) Public : It contain all static files
  3) src : main content
  4) src >> assets : It contain all required things that is used in building
  5) parent_folder > index.html: root (convert to react root)
  6) src > main.jsx : First file to start (Entry point) create root 
  7) src > index.css : Css configuation for main.jsx
  8) src > App.jsx : render on index.html
  9) src > App.css : Css configuation for App.jsx
  10) package.json : It conatin dependancy and script
  11) JSX (HTML code inside JS) >> react >> html
  12) Export and import

/////////////////////// M 2 ////////////////////////

--> https://github.com/thepranaygupta/html-tailwind-css-starter-pack

--> git clone https://github.com/thepranaygupta/html-tailwind-css-starter-pack.git

# Syntex:

--> Enter : rfce

import React from 'react';
import ReactDOM from 'react-dom/client';

function Hello(props) {
  return <h1>Hello World!</h1>;
}

const container = document.getElementById("root");
const root = ReactDOM.createRoot(container);
root.render(<Hello />);

# React Fiber 

https://github.com/acdlite/react-fiber-architecture
https://www.geeksforgeeks.org/reactjs/what-is-react-fiber/

# React components

--> Function that returns HTML elements 
--> Independent and reusable codes 
--> Class components and Function components
--> Components name always starts with capital letter 

# Components Implementation 

--> Component in Component 
--> Component in Files

# Life Cycle of Components 

 1) Mounting 
--> Rendering element into DOM

 2) Updating 
--> Update DOM structure based in user action 

 3) Unmounting 
--> Removal of component from DOM 

# Props: (Properties)

--> Props are arguments passed into React components 
--> Data passing from Parent to Child 

# Props drilling

--> Data parent se child tak line meai send hota heai 
--> P --> c1 --> c2 --> c3 

# State Lifting

--> child se parent ki data pass karna
--> It also help to pass data to siblings

// maintain single state at parent the pass function and value to Props

# React Event 

--> Based on user action perform various task

# Condtional rendering

1) if-else
2) ternary Operator
3) logical Operator
4) Early return 

# React Forms 

--> It allows users to interact with the web page 
--> Whenever we submit form it is handle by the components 
--> This data is stored into component state 
--> To control action use event handler and state 

# React Routing:

--> CMD : npm i -D react-router-dom

# Syntex  (Entire Window)

import { BrowserRouter, Routes, Route } from "react-router-dom";

<BrowserRouter>
  <Routes>
    <Route path="Path_of_compo1" element={<component/>}>
      <Route path="Path_of_compo1/Location_of_compo" element={<component />} />
    </Route>
    <Route path="Path_of_compo2" element={<component />} />
    <Route path="*" element={<PageNotFound />} />
  </Routes>
</BrowserRouter>

# Syntex  (Specific Part of Window)

 <Outlet/>
 <Link to="Path_of_compo1/>
 <NavLink to="Path_of_compo1">
 
--> useLoaderData
--> loader 
--> useparam 
--> outlet 
--> nav / navlink

# React Memo 

--> Skip rendering of component if it's props have not changed 
--> Used to improve performance 

# Hooks:
 
--> Addtional functionallity
--> Must be used in functional component

# Major Rules 

--> Hookes can only be called inside React function components 
--> Hookes can only be called at the top level of a component 
--> Hooks can not be conditional 

1) usestate

--> It allows us to track state in a function component 
--> State refers to data / property that needs to be track in an application 
--> State can be string, numbers, booleans, arrays, object 

--> import { useState } from "react";

 # Syntex 

--> const [Curr_state, function_to_update_state] = useState(Initial_Value)

2) useEffect
--> React hook used to generate side effect
--> On happening certain event we are going to handle
--> Used to synchronize a component with an external system 

--> import { useEffect } from "react";

 # Syntex 

--> useeffect(<function>,<dependency>)

--> useEffect(() => {
    first
  
    return () => {
      second
    }
  }, [third])

--> First : Side-effect function
--> second : cleanup function
--> third : comman seprated dependancy list

 # Uses 
--> Componet
--> Time Componet
--> Data fetching
--> Resize component
--> Multieffect

3) useContext

--> Global State managemnt 
--> It can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone.

 # Problem
--> P --> c1 --> c2 --> c3 

 # Solution
--> P --> c3

 # Step:

--> Create context
--> Provide  (we can use multiple provider)
--> Pass Value 
--> Consume

--> import { useContext } from "react";

 # Syntax

--> const UserContext = createContext()
--> <UserContext.Provider value={user}>
      <Component2 />
    </UserContext.Provider>
--> <Component3 /> -> <Component4 /> -> <Component5 /> -> <Component6 /> -> 
--> const user = useContext(UserContext); --> access user in Component6

4) useRef 

--> It return object contain (.current)
--> It return only one item 
--> It allows to persist values between renders 

 # Usecase
--> Variable that persist value across re-render
--> Access DOM eleemnt directly 
--> Keep track of previous state 

-> ref create 
-> ref link to element
-> ref.current 

--> import { useRef } from "react";

5) useMemo

--> returns memorized value 
--> Store data for after uses when it is needed

--> import { useMemo } from "react"

6) useNavigation




7) usecallback

--> return memorized callback function
--> It catches function defination so that function will never created again and again
--> Used to avoid re-render of child component
--> Used to handle expensive operation

--> import { usecallback } from "react"

 # Syntax
--> const cacheFnx = useCallback(fnx, dependency_array)


8) useReducer 

--> It allows for custom logic 

--> import { useReducer } from "react" 

 # Syntax

--> useReducer(<reducer>, <initialState>)


9) Custom Hooks 

--> When we have certain logic that needs to be used by multiple components we extract that logic to custom hook




--> State management (Redux / Redux Toolkit / React-Redux / zustand / context API )
--> Pass data in organized way 

Redux:

Context API:

https://www.udemy.com/course/the-ultimate-react-course/?couponCode=LEARNNOWPLANS



